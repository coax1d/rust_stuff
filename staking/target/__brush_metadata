{"external_traits":{"Pausable":"#[doc =\n  \" Contract module which allows children to implement an emergency stop\"]\n#[doc = \" mechanism that can be triggered by an authorized account.\"]\n#[doc = \"\"]\n#[doc =\n  \" This module is used through embedding of `PausableData` and implementation of `Pausable` and\"]\n#[doc =\n  \" `PausableStorage` traits. It will make available the modifier `when_not_paused` and `when_paused`,\"]\n#[doc = \" which can be applied to your functions to restrict their usage.\"]\npub trait Pausable : PausableStorage\n{\n    #[doc = \" Returns true if the contract is paused, and false otherwise.\"]\n    #[ink(message)] fn paused(& self) -> bool { self.get().paused }\n    #[doc = \" User must override this method in their contract.\"] fn\n    _emit_paused_event(& self, _account : AccountId) { }\n    #[doc = \" User must override this method in their contract.\"] fn\n    _emit_unpaused_event(& self, _account : AccountId) { }\n    #[doc = \" Triggers stopped state.\"] #[doc = \"\"]\n    #[doc = \" On success a `Paused` event is emitted.\"]\n    #[modifiers(when_not_paused)] fn _pause(& mut self)\n    {\n        self.get_mut().paused = true ;\n        self._emit_paused_event(Self :: env().caller())\n    } #[doc = \" Returns to normal state.\"] #[doc = \"\"]\n    #[doc = \" On success a `Unpaused` event is emitted.\"]\n    #[modifiers(when_paused)] fn _unpause(& mut self)\n    {\n        self.get_mut().paused = false ;\n        self._emit_unpaused_event(Self :: env().caller())\n    }\n}"}}